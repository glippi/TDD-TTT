{"version":3,"sources":["Header.js","Cell.js","Grid.js","Player.js","gameChecker.js","App.js","serviceWorker.js","index.js"],"names":["Header","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","Component","Cell","_this$props","props","cellValue","signBoard","onClick","Grid","grid","winner","actualPlayer","_this$props$className","concat","style","fontSize","map","index","Cell_Cell","Player","whoIsPlaying","firstHorizontalRow","sign","secondHorizontalRow","thirdHorizontalRow","firstVerticalRow","secondVerticalRow","thirdVerticalRow","diagonalToRight","diagonalToLeft","App","state","changePlayer","nextPlayer","_this","setState","checkForWinner","gameChecker","_this$state","splice","_this$state2","Header_Header","Player_Player","Grid_Grid","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5252927a.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class Header extends Component {\n  render() {\n    return (\n      <header className={`header bg-gold sans-serif w-100 ph3 pv3 pv4-ns ph4-m ph5-l`}>\n        <h3 className=\"f2 f1-m f-headline-l measure-narrow lh-title mv0\">\n          <span className=\"bg-black-90 lh-copy white pa1 tracked-tight\">\n            Tic Tac Toe\n          </span>\n        </h3>\n      </header>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport class Cell extends Component {\n  render() {\n    const { cellValue, signBoard } = this.props\n\n    return (\n      <div className={`cell flex flex-row justify-center items-center w4 h4 ba pointer`} onClick={()=> signBoard()}>\n        {cellValue}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Cell } from './Cell'\n\nexport class Grid extends Component {\n  render() {\n    const { grid, signBoard, winner, actualPlayer, className = \"\" } = this.props\n\n    return (\n      <div className={`w-100 grid-wrapper flex flex-row justify-around items-center ${className}`}>\n        {!winner &&\n          <div className=\"w-30\" style={{ fontSize: '100px'}}>\n            {actualPlayer === \"player1\"\n              ? (<span>&#129489;</span>)\n              : (<span>&#128590;</span>)\n            }\n        </div>\n        }\n        {winner &&\n          <div className=\"w-30\" style={{ fontSize: '100px'}}>\n            {winner === \"player1\" && <span>&#129489;</span>}\n            {winner === \"player2\" && <span>&#128590;</span>}\n          </div>\n        }\n\n        <div className=\"w-25 flex flex-row flex-wrap justify-center items-center\">\n          {grid.map((value, index) => (\n            <div key={index}>\n              <Cell cellValue={value} signBoard={signBoard(index + 1)} />\n            </div>\n          ))}\n        </div>\n\n        <div className=\"w-30\">\n          {winner === 'player1' &&\n              <div className={`f5 fw4 ttu tracked`}>\n                Shame on you player 2\n                <div style={{ fontSize: '80px' }}>&#129318;</div>\n              </div>\n          }\n          {winner === 'player2' &&\n              <div className={`f5 fw4 ttu tracked`}>\n                Shame on you player 1\n                <div style={{ fontSize: '80px' }}>&#128583;</div>\n              </div>\n          }\n        </div>\n     </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport class Player extends Component {\n  render() {\n    const { whoIsPlaying, winner } = this.props\n    const actualPlayer = whoIsPlaying === 'player1' ? \"Player 1\" : \"Player 2\"\n\n    return (\n      <h2 className={`player ${whoIsPlaying === 'player1' ? \"blue\" : \"red\"} mr3 mv5 f3 fw4 ttu tracked`}>\n        {`${winner ? `${winner} wins!` : `${actualPlayer} moves`}`}\n        {winner &&\n          (<div className={`pointer black absolute mv1 f5`}>\n            Restart the game?\n            <div className=\"mv1\">&#128260;</div>\n          </div>)\n        }\n      </h2>\n    )\n  }\n}\n","const firstHorizontalRow = (grid, sign) => grid[0] === sign && grid[1] === sign && grid[2] === sign\nconst secondHorizontalRow = (grid, sign) => grid[3] === sign && grid[4] === sign && grid[5] === sign\nconst thirdHorizontalRow = (grid, sign) => grid[6] === sign && grid[7] === sign && grid[8] === sign\n\nconst firstVerticalRow = (grid, sign) => grid[0] === sign && grid[3] === sign && grid[6] === sign\nconst secondVerticalRow = (grid, sign) => grid[1] === sign && grid[3] === sign && grid[5] === sign\nconst thirdVerticalRow = (grid, sign) => grid[2] === sign && grid[5] === sign && grid[8] === sign\n\nconst diagonalToRight = (grid, sign) => grid[0] === sign && grid[4] === sign && grid[8] === sign\nconst diagonalToLeft = (grid, sign) => grid[2] === sign && grid[4] === sign && grid[6] === sign\n\nexport default function gameChecker(grid) {\n  if (firstHorizontalRow(grid, \"❌\")\n    || \n   secondHorizontalRow(grid, \"❌\")\n    || \n   thirdHorizontalRow(grid, \"❌\")\n    || \n   firstVerticalRow(grid, \"❌\")\n    || \n   secondVerticalRow(grid, \"❌\")\n    || \n   thirdVerticalRow(grid, \"❌\")\n    || \n   diagonalToRight(grid, \"❌\")\n    || \n   diagonalToLeft(grid, \"❌\")\n  ) {\n    return \"player1\"\n  }\n  // if (firstHorizontalRow(grid, \"⭕\")\n  //   || \n  //  secondHorizontalRow(grid, \"⭕\")\n  //   || \n  //  thirdHorizontalRow(grid, \"⭕\")\n  //   || \n  //  firstVerticalRow(grid, \"⭕\")\n  //   || \n  //  secondVerticalRow(grid, \"⭕\")\n  //   || \n  //  thirdVerticalRow(grid, \"⭕\")\n  //   || \n  //  diagonalToRight(grid, \"⭕\")\n  //   || \n  //  diagonalToLeft(grid, \"⭕\")\n  // ) {\n  //   return \"player2\"\n  // }\n  // return \"It's a draft!\"\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Header } from './Header'\nimport { Grid } from './Grid'\nimport { Player } from './Player'\nimport gameChecker from './gameChecker'\n\nexport default class App extends Component {\n  state = {\n    grid: [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"],\n    actualPlayer: \"player1\",\n    winner: \"\"\n  }\n\n  changePlayer = () => {\n    const { actualPlayer } = this.state\n    const nextPlayer = actualPlayer === \"player1\" ? \"player2\" : \"player1\"\n    this.setState({ actualPlayer: nextPlayer })\n  }\n\n  checkForWinner = () => {\n    const { grid } = this.state\n    const winner = gameChecker(grid)\n    this.setState({ winner })\n  }\n\n  signBoard = index => () => {\n    const { actualPlayer, grid, winner } = this.state\n    const sign = actualPlayer === 'player1' ? '❌' : '⭕'\n    grid.splice(index - 1, 1, sign)\n    this.checkForWinner()\n\n    if (!winner) this.changePlayer()\n    if (winner) {\n      this.setState({ actualPlayer: \"\"})\n    }\n  }\n\n  render() {\n    const { grid, actualPlayer, winner } = this.state\n\n    return (\n      <div className=\"App flex flex-column items-center justify-center\">\n        <Header />\n        <Player whoIsPlaying={actualPlayer} winner={winner} />\n        <Grid grid={grid} signBoard={this.signBoard} winner={winner} actualPlayer={actualPlayer} className={`${winner ? \"pointer-events-none\" : \"\"}`} />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}